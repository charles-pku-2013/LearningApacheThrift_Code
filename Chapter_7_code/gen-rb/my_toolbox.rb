#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'my_base_service'
require 'mytoolbox_types'

module Mytoolbox
  module MyToolbox
    class Client < ::Mybase::MyBaseService::Client 
      include ::Thrift::Client

      def get_distance(point1, point2)
        send_get_distance(point1, point2)
        return recv_get_distance()
      end

      def send_get_distance(point1, point2)
        send_message('get_distance', Get_distance_args, :point1 => point1, :point2 => point2)
      end

      def recv_get_distance()
        result = receive_message(Get_distance_result)
        return result.success unless result.success.nil?
        raise result.err1 unless result.err1.nil?
        raise result.err2 unless result.err2.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_distance failed: unknown result')
      end

      def find_occurences(string_to_match, regex)
        send_find_occurences(string_to_match, regex)
        return recv_find_occurences()
      end

      def send_find_occurences(string_to_match, regex)
        send_message('find_occurences', Find_occurences_args, :string_to_match => string_to_match, :regex => regex)
      end

      def recv_find_occurences()
        result = receive_message(Find_occurences_result)
        return result.success unless result.success.nil?
        raise result.err1 unless result.err1.nil?
        raise result.err2 unless result.err2.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'find_occurences failed: unknown result')
      end

    end

    class Processor < ::Mybase::MyBaseService::Processor 
      include ::Thrift::Processor

      def process_get_distance(seqid, iprot, oprot)
        args = read_args(iprot, Get_distance_args)
        result = Get_distance_result.new()
        begin
          result.success = @handler.get_distance(args.point1, args.point2)
        rescue ::Mytoolbox::CoordsOutOfRange => err1
          result.err1 = err1
        rescue ::Mybase::WrongDataType => err2
          result.err2 = err2
        end
        write_result(result, oprot, 'get_distance', seqid)
      end

      def process_find_occurences(seqid, iprot, oprot)
        args = read_args(iprot, Find_occurences_args)
        result = Find_occurences_result.new()
        begin
          result.success = @handler.find_occurences(args.string_to_match, args.regex)
        rescue ::Mytoolbox::NoValidRegex => err1
          result.err1 = err1
        rescue ::Mytoolbox::InvalidInputString => err2
          result.err2 = err2
        end
        write_result(result, oprot, 'find_occurences', seqid)
      end

    end

    # HELPER FUNCTIONS AND STRUCTURES

    class Get_distance_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      POINT1 = 1
      POINT2 = 2

      FIELDS = {
        POINT1 => {:type => ::Thrift::Types::STRUCT, :name => 'point1', :class => ::Mytoolbox::Point},
        POINT2 => {:type => ::Thrift::Types::STRUCT, :name => 'point2', :class => ::Mytoolbox::Point}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Get_distance_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      ERR1 = 1
      ERR2 = 2

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::I16, :name => 'success'},
        ERR1 => {:type => ::Thrift::Types::STRUCT, :name => 'err1', :class => ::Mytoolbox::CoordsOutOfRange},
        ERR2 => {:type => ::Thrift::Types::STRUCT, :name => 'err2', :class => ::Mybase::WrongDataType}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Find_occurences_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      STRING_TO_MATCH = 1
      REGEX = 2

      FIELDS = {
        STRING_TO_MATCH => {:type => ::Thrift::Types::STRING, :name => 'string_to_match'},
        REGEX => {:type => ::Thrift::Types::STRING, :name => 'regex'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Find_occurences_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      ERR1 = 1
      ERR2 = 2

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
        ERR1 => {:type => ::Thrift::Types::STRUCT, :name => 'err1', :class => ::Mytoolbox::NoValidRegex},
        ERR2 => {:type => ::Thrift::Types::STRUCT, :name => 'err2', :class => ::Mytoolbox::InvalidInputString}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end

end
