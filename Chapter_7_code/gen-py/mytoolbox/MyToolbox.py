#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import mybase.MyBaseService
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface(mybase.MyBaseService.Iface):
  def get_distance(self, point1, point2):
    """
    Parameters:
     - point1
     - point2
    """
    pass

  def find_occurences(self, string_to_match, regex):
    """
    Parameters:
     - string_to_match
     - regex
    """
    pass


class Client(mybase.MyBaseService.Client, Iface):
  def __init__(self, iprot, oprot=None):
    mybase.MyBaseService.Client.__init__(self, iprot, oprot)

  def get_distance(self, point1, point2):
    """
    Parameters:
     - point1
     - point2
    """
    self.send_get_distance(point1, point2)
    return self.recv_get_distance()

  def send_get_distance(self, point1, point2):
    self._oprot.writeMessageBegin('get_distance', TMessageType.CALL, self._seqid)
    args = get_distance_args()
    args.point1 = point1
    args.point2 = point2
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_distance(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = get_distance_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err1 is not None:
      raise result.err1
    if result.err2 is not None:
      raise result.err2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_distance failed: unknown result");

  def find_occurences(self, string_to_match, regex):
    """
    Parameters:
     - string_to_match
     - regex
    """
    self.send_find_occurences(string_to_match, regex)
    return self.recv_find_occurences()

  def send_find_occurences(self, string_to_match, regex):
    self._oprot.writeMessageBegin('find_occurences', TMessageType.CALL, self._seqid)
    args = find_occurences_args()
    args.string_to_match = string_to_match
    args.regex = regex
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_find_occurences(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = find_occurences_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err1 is not None:
      raise result.err1
    if result.err2 is not None:
      raise result.err2
    raise TApplicationException(TApplicationException.MISSING_RESULT, "find_occurences failed: unknown result");


class Processor(mybase.MyBaseService.Processor, Iface, TProcessor):
  def __init__(self, handler):
    mybase.MyBaseService.Processor.__init__(self, handler)
    self._processMap["get_distance"] = Processor.process_get_distance
    self._processMap["find_occurences"] = Processor.process_find_occurences

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_get_distance(self, seqid, iprot, oprot):
    args = get_distance_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_distance_result()
    try:
      result.success = self._handler.get_distance(args.point1, args.point2)
    except CoordsOutOfRange, err1:
      result.err1 = err1
    except mybase.ttypes.WrongDataType, err2:
      result.err2 = err2
    oprot.writeMessageBegin("get_distance", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_find_occurences(self, seqid, iprot, oprot):
    args = find_occurences_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = find_occurences_result()
    try:
      result.success = self._handler.find_occurences(args.string_to_match, args.regex)
    except NoValidRegex, err1:
      result.err1 = err1
    except InvalidInputString, err2:
      result.err2 = err2
    oprot.writeMessageBegin("find_occurences", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class get_distance_args:
  """
  Attributes:
   - point1
   - point2
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'point1', (Point, Point.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'point2', (Point, Point.thrift_spec), None, ), # 2
  )

  def __init__(self, point1=None, point2=None,):
    self.point1 = point1
    self.point2 = point2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.point1 = Point()
          self.point1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.point2 = Point()
          self.point2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_distance_args')
    if self.point1 is not None:
      oprot.writeFieldBegin('point1', TType.STRUCT, 1)
      self.point1.write(oprot)
      oprot.writeFieldEnd()
    if self.point2 is not None:
      oprot.writeFieldBegin('point2', TType.STRUCT, 2)
      self.point2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.point1)
    value = (value * 31) ^ hash(self.point2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_distance_result:
  """
  Attributes:
   - success
   - err1
   - err2
  """

  thrift_spec = (
    (0, TType.I16, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'err1', (CoordsOutOfRange, CoordsOutOfRange.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'err2', (mybase.ttypes.WrongDataType, mybase.ttypes.WrongDataType.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, err1=None, err2=None,):
    self.success = success
    self.err1 = err1
    self.err2 = err2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I16:
          self.success = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err1 = CoordsOutOfRange()
          self.err1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.err2 = mybase.ttypes.WrongDataType()
          self.err2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_distance_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I16, 0)
      oprot.writeI16(self.success)
      oprot.writeFieldEnd()
    if self.err1 is not None:
      oprot.writeFieldBegin('err1', TType.STRUCT, 1)
      self.err1.write(oprot)
      oprot.writeFieldEnd()
    if self.err2 is not None:
      oprot.writeFieldBegin('err2', TType.STRUCT, 2)
      self.err2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.err1)
    value = (value * 31) ^ hash(self.err2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class find_occurences_args:
  """
  Attributes:
   - string_to_match
   - regex
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'string_to_match', None, None, ), # 1
    (2, TType.STRING, 'regex', None, None, ), # 2
  )

  def __init__(self, string_to_match=None, regex=None,):
    self.string_to_match = string_to_match
    self.regex = regex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.string_to_match = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.regex = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('find_occurences_args')
    if self.string_to_match is not None:
      oprot.writeFieldBegin('string_to_match', TType.STRING, 1)
      oprot.writeString(self.string_to_match)
      oprot.writeFieldEnd()
    if self.regex is not None:
      oprot.writeFieldBegin('regex', TType.STRING, 2)
      oprot.writeString(self.regex)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.string_to_match)
    value = (value * 31) ^ hash(self.regex)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class find_occurences_result:
  """
  Attributes:
   - success
   - err1
   - err2
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'err1', (NoValidRegex, NoValidRegex.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'err2', (InvalidInputString, InvalidInputString.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, err1=None, err2=None,):
    self.success = success
    self.err1 = err1
    self.err2 = err2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.success.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err1 = NoValidRegex()
          self.err1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.err2 = InvalidInputString()
          self.err2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('find_occurences_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter6 in self.success:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.err1 is not None:
      oprot.writeFieldBegin('err1', TType.STRUCT, 1)
      self.err1.write(oprot)
      oprot.writeFieldEnd()
    if self.err2 is not None:
      oprot.writeFieldBegin('err2', TType.STRUCT, 2)
      self.err2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.err1)
    value = (value * 31) ^ hash(self.err2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
