<?php
namespace mytoolbox;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface MyToolboxIf extends \mybase\MyBaseServiceIf {
  /**
   * @param \mytoolbox\Point $point1
   * @param \mytoolbox\Point $point2
   * @return int
   * @throws \mytoolbox\CoordsOutOfRange
   * @throws \mybase\WrongDataType
   */
  public function get_distance(\mytoolbox\Point $point1, \mytoolbox\Point $point2);
  /**
   * @param string $string_to_match
   * @param string $regex
   * @return string[]
   * @throws \mytoolbox\NoValidRegex
   * @throws \mytoolbox\InvalidInputString
   */
  public function find_occurences($string_to_match, $regex);
}

class MyToolboxClient extends \mybase\MyBaseServiceClient implements \mytoolbox\MyToolboxIf {
  public function __construct($input, $output=null) {
    parent::__construct($input, $output);
  }

  public function get_distance(\mytoolbox\Point $point1, \mytoolbox\Point $point2)
  {
    $this->send_get_distance($point1, $point2);
    return $this->recv_get_distance();
  }

  public function send_get_distance(\mytoolbox\Point $point1, \mytoolbox\Point $point2)
  {
    $args = new \mytoolbox\MyToolbox_get_distance_args();
    $args->point1 = $point1;
    $args->point2 = $point2;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_distance', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_distance', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_distance()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\mytoolbox\MyToolbox_get_distance_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \mytoolbox\MyToolbox_get_distance_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->err1 !== null) {
      throw $result->err1;
    }
    if ($result->err2 !== null) {
      throw $result->err2;
    }
    throw new \Exception("get_distance failed: unknown result");
  }

  public function find_occurences($string_to_match, $regex)
  {
    $this->send_find_occurences($string_to_match, $regex);
    return $this->recv_find_occurences();
  }

  public function send_find_occurences($string_to_match, $regex)
  {
    $args = new \mytoolbox\MyToolbox_find_occurences_args();
    $args->string_to_match = $string_to_match;
    $args->regex = $regex;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'find_occurences', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('find_occurences', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_find_occurences()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\mytoolbox\MyToolbox_find_occurences_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \mytoolbox\MyToolbox_find_occurences_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->err1 !== null) {
      throw $result->err1;
    }
    if ($result->err2 !== null) {
      throw $result->err2;
    }
    throw new \Exception("find_occurences failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class MyToolbox_get_distance_args {
  static $_TSPEC;

  /**
   * @var \mytoolbox\Point
   */
  public $point1 = null;
  /**
   * @var \mytoolbox\Point
   */
  public $point2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'point1',
          'type' => TType::STRUCT,
          'class' => '\mytoolbox\Point',
          ),
        2 => array(
          'var' => 'point2',
          'type' => TType::STRUCT,
          'class' => '\mytoolbox\Point',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['point1'])) {
        $this->point1 = $vals['point1'];
      }
      if (isset($vals['point2'])) {
        $this->point2 = $vals['point2'];
      }
    }
  }

  public function getName() {
    return 'MyToolbox_get_distance_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->point1 = new \mytoolbox\Point();
            $xfer += $this->point1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->point2 = new \mytoolbox\Point();
            $xfer += $this->point2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MyToolbox_get_distance_args');
    if ($this->point1 !== null) {
      if (!is_object($this->point1)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('point1', TType::STRUCT, 1);
      $xfer += $this->point1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->point2 !== null) {
      if (!is_object($this->point2)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('point2', TType::STRUCT, 2);
      $xfer += $this->point2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MyToolbox_get_distance_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \mytoolbox\CoordsOutOfRange
   */
  public $err1 = null;
  /**
   * @var \mybase\WrongDataType
   */
  public $err2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I16,
          ),
        1 => array(
          'var' => 'err1',
          'type' => TType::STRUCT,
          'class' => '\mytoolbox\CoordsOutOfRange',
          ),
        2 => array(
          'var' => 'err2',
          'type' => TType::STRUCT,
          'class' => '\mybase\WrongDataType',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['err1'])) {
        $this->err1 = $vals['err1'];
      }
      if (isset($vals['err2'])) {
        $this->err2 = $vals['err2'];
      }
    }
  }

  public function getName() {
    return 'MyToolbox_get_distance_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->err1 = new \mytoolbox\CoordsOutOfRange();
            $xfer += $this->err1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->err2 = new \mybase\WrongDataType();
            $xfer += $this->err2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MyToolbox_get_distance_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I16, 0);
      $xfer += $output->writeI16($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->err1 !== null) {
      $xfer += $output->writeFieldBegin('err1', TType::STRUCT, 1);
      $xfer += $this->err1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->err2 !== null) {
      $xfer += $output->writeFieldBegin('err2', TType::STRUCT, 2);
      $xfer += $this->err2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MyToolbox_find_occurences_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $string_to_match = null;
  /**
   * @var string
   */
  public $regex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'string_to_match',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'regex',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['string_to_match'])) {
        $this->string_to_match = $vals['string_to_match'];
      }
      if (isset($vals['regex'])) {
        $this->regex = $vals['regex'];
      }
    }
  }

  public function getName() {
    return 'MyToolbox_find_occurences_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->string_to_match);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->regex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MyToolbox_find_occurences_args');
    if ($this->string_to_match !== null) {
      $xfer += $output->writeFieldBegin('string_to_match', TType::STRING, 1);
      $xfer += $output->writeString($this->string_to_match);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->regex !== null) {
      $xfer += $output->writeFieldBegin('regex', TType::STRING, 2);
      $xfer += $output->writeString($this->regex);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MyToolbox_find_occurences_result {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $success = null;
  /**
   * @var \mytoolbox\NoValidRegex
   */
  public $err1 = null;
  /**
   * @var \mytoolbox\InvalidInputString
   */
  public $err2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'err1',
          'type' => TType::STRUCT,
          'class' => '\mytoolbox\NoValidRegex',
          ),
        2 => array(
          'var' => 'err2',
          'type' => TType::STRUCT,
          'class' => '\mytoolbox\InvalidInputString',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['err1'])) {
        $this->err1 = $vals['err1'];
      }
      if (isset($vals['err2'])) {
        $this->err2 = $vals['err2'];
      }
    }
  }

  public function getName() {
    return 'MyToolbox_find_occurences_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->success []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->err1 = new \mytoolbox\NoValidRegex();
            $xfer += $this->err1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->err2 = new \mytoolbox\InvalidInputString();
            $xfer += $this->err2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MyToolbox_find_occurences_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter6)
          {
            $xfer += $output->writeString($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->err1 !== null) {
      $xfer += $output->writeFieldBegin('err1', TType::STRUCT, 1);
      $xfer += $this->err1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->err2 !== null) {
      $xfer += $output->writeFieldBegin('err2', TType::STRUCT, 2);
      $xfer += $this->err2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


