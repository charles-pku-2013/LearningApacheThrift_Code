<?php
namespace mybase;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface MyBaseServiceIf {
  /**
   * @param string $message
   * @param string $filename
   * @throws \mybase\MessageTooShort
   * @throws \mybase\InvalidFileName
   * @throws \mybase\CantWriteToFile
   */
  public function save_to_log($message, $filename);
}

class MyBaseServiceClient implements \mybase\MyBaseServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function save_to_log($message, $filename)
  {
    $this->send_save_to_log($message, $filename);
    $this->recv_save_to_log();
  }

  public function send_save_to_log($message, $filename)
  {
    $args = new \mybase\MyBaseService_save_to_log_args();
    $args->message = $message;
    $args->filename = $filename;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'save_to_log', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('save_to_log', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_save_to_log()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\mybase\MyBaseService_save_to_log_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \mybase\MyBaseService_save_to_log_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->err1 !== null) {
      throw $result->err1;
    }
    if ($result->err2 !== null) {
      throw $result->err2;
    }
    if ($result->err3 !== null) {
      throw $result->err3;
    }
    return;
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class MyBaseService_save_to_log_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = null;
  /**
   * @var string
   */
  public $filename = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'filename',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['filename'])) {
        $this->filename = $vals['filename'];
      }
    }
  }

  public function getName() {
    return 'MyBaseService_save_to_log_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->filename);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MyBaseService_save_to_log_args');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filename !== null) {
      $xfer += $output->writeFieldBegin('filename', TType::STRING, 2);
      $xfer += $output->writeString($this->filename);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MyBaseService_save_to_log_result {
  static $_TSPEC;

  /**
   * @var \mybase\MessageTooShort
   */
  public $err1 = null;
  /**
   * @var \mybase\InvalidFileName
   */
  public $err2 = null;
  /**
   * @var \mybase\CantWriteToFile
   */
  public $err3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'err1',
          'type' => TType::STRUCT,
          'class' => '\mybase\MessageTooShort',
          ),
        2 => array(
          'var' => 'err2',
          'type' => TType::STRUCT,
          'class' => '\mybase\InvalidFileName',
          ),
        3 => array(
          'var' => 'err3',
          'type' => TType::STRUCT,
          'class' => '\mybase\CantWriteToFile',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['err1'])) {
        $this->err1 = $vals['err1'];
      }
      if (isset($vals['err2'])) {
        $this->err2 = $vals['err2'];
      }
      if (isset($vals['err3'])) {
        $this->err3 = $vals['err3'];
      }
    }
  }

  public function getName() {
    return 'MyBaseService_save_to_log_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->err1 = new \mybase\MessageTooShort();
            $xfer += $this->err1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->err2 = new \mybase\InvalidFileName();
            $xfer += $this->err2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->err3 = new \mybase\CantWriteToFile();
            $xfer += $this->err3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MyBaseService_save_to_log_result');
    if ($this->err1 !== null) {
      $xfer += $output->writeFieldBegin('err1', TType::STRUCT, 1);
      $xfer += $this->err1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->err2 !== null) {
      $xfer += $output->writeFieldBegin('err2', TType::STRUCT, 2);
      $xfer += $this->err2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->err3 !== null) {
      $xfer += $output->writeFieldBegin('err3', TType::STRUCT, 3);
      $xfer += $this->err3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


