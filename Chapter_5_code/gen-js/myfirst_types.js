//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


if (typeof myfirst === 'undefined') {
  myfirst = {};
}
myfirst.MyEnum = {
  'ENUM1' : 0,
  'ENUM2' : 1,
  'ENUM3' : 2
};
myfirst.MyStruct = function(args) {
  this.mybool = null;
  this.mybyte = null;
  this.myi16 = null;
  this.myi32 = null;
  this.myi64 = null;
  this.mydouble = null;
  this.mystring = null;
  this.mylist = null;
  this.myset = null;
  this.mymap = null;
  if (args) {
    if (args.mybool !== undefined) {
      this.mybool = args.mybool;
    }
    if (args.mybyte !== undefined) {
      this.mybyte = args.mybyte;
    }
    if (args.myi16 !== undefined) {
      this.myi16 = args.myi16;
    }
    if (args.myi32 !== undefined) {
      this.myi32 = args.myi32;
    }
    if (args.myi64 !== undefined) {
      this.myi64 = args.myi64;
    }
    if (args.mydouble !== undefined) {
      this.mydouble = args.mydouble;
    }
    if (args.mystring !== undefined) {
      this.mystring = args.mystring;
    }
    if (args.mylist !== undefined) {
      this.mylist = args.mylist;
    }
    if (args.myset !== undefined) {
      this.myset = args.myset;
    }
    if (args.mymap !== undefined) {
      this.mymap = args.mymap;
    }
  }
};
myfirst.MyStruct.prototype = {};
myfirst.MyStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.mybool = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.mybyte = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.myi16 = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.myi32 = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.myi64 = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.mydouble = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.mystring = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.mylist = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32().value;
          this.mylist.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.SET) {
        var _size7 = 0;
        var _rtmp311;
        this.myset = [];
        var _etype10 = 0;
        _rtmp311 = input.readSetBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readI32().value;
          this.myset.push(elem13);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.MAP) {
        var _size14 = 0;
        var _rtmp318;
        this.mymap = {};
        var _ktype15 = 0;
        var _vtype16 = 0;
        _rtmp318 = input.readMapBegin();
        _ktype15 = _rtmp318.ktype;
        _vtype16 = _rtmp318.vtype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          if (_i19 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key20 = null;
          var val21 = null;
          key20 = input.readI32().value;
          val21 = input.readI32().value;
          this.mymap[key20] = val21;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

myfirst.MyStruct.prototype.write = function(output) {
  output.writeStructBegin('MyStruct');
  if (this.mybool !== null && this.mybool !== undefined) {
    output.writeFieldBegin('mybool', Thrift.Type.BOOL, 1);
    output.writeBool(this.mybool);
    output.writeFieldEnd();
  }
  if (this.mybyte !== null && this.mybyte !== undefined) {
    output.writeFieldBegin('mybyte', Thrift.Type.BYTE, 2);
    output.writeByte(this.mybyte);
    output.writeFieldEnd();
  }
  if (this.myi16 !== null && this.myi16 !== undefined) {
    output.writeFieldBegin('myi16', Thrift.Type.I16, 3);
    output.writeI16(this.myi16);
    output.writeFieldEnd();
  }
  if (this.myi32 !== null && this.myi32 !== undefined) {
    output.writeFieldBegin('myi32', Thrift.Type.I32, 4);
    output.writeI32(this.myi32);
    output.writeFieldEnd();
  }
  if (this.myi64 !== null && this.myi64 !== undefined) {
    output.writeFieldBegin('myi64', Thrift.Type.I64, 5);
    output.writeI64(this.myi64);
    output.writeFieldEnd();
  }
  if (this.mydouble !== null && this.mydouble !== undefined) {
    output.writeFieldBegin('mydouble', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.mydouble);
    output.writeFieldEnd();
  }
  if (this.mystring !== null && this.mystring !== undefined) {
    output.writeFieldBegin('mystring', Thrift.Type.STRING, 7);
    output.writeString(this.mystring);
    output.writeFieldEnd();
  }
  if (this.mylist !== null && this.mylist !== undefined) {
    output.writeFieldBegin('mylist', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.I32, this.mylist.length);
    for (var iter22 in this.mylist)
    {
      if (this.mylist.hasOwnProperty(iter22))
      {
        iter22 = this.mylist[iter22];
        output.writeI32(iter22);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.myset !== null && this.myset !== undefined) {
    output.writeFieldBegin('myset', Thrift.Type.SET, 9);
    output.writeSetBegin(Thrift.Type.I32, this.myset.length);
    for (var iter23 in this.myset)
    {
      if (this.myset.hasOwnProperty(iter23))
      {
        iter23 = this.myset[iter23];
        output.writeI32(iter23);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.mymap !== null && this.mymap !== undefined) {
    output.writeFieldBegin('mymap', Thrift.Type.MAP, 10);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.I32, Thrift.objectLength(this.mymap));
    for (var kiter24 in this.mymap)
    {
      if (this.mymap.hasOwnProperty(kiter24))
      {
        var viter25 = this.mymap[kiter24];
        output.writeI32(kiter24);
        output.writeI32(viter25);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

myfirst.MyUnion = function(args) {
  this.mybool = null;
  this.mystring = null;
  if (args) {
    if (args.mybool !== undefined) {
      this.mybool = args.mybool;
    }
    if (args.mystring !== undefined) {
      this.mystring = args.mystring;
    }
  }
};
myfirst.MyUnion.prototype = {};
myfirst.MyUnion.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.mybool = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mystring = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

myfirst.MyUnion.prototype.write = function(output) {
  output.writeStructBegin('MyUnion');
  if (this.mybool !== null && this.mybool !== undefined) {
    output.writeFieldBegin('mybool', Thrift.Type.BOOL, 1);
    output.writeBool(this.mybool);
    output.writeFieldEnd();
  }
  if (this.mystring !== null && this.mystring !== undefined) {
    output.writeFieldBegin('mystring', Thrift.Type.STRING, 2);
    output.writeString(this.mystring);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

myfirst.MyError = function(args) {
  this.error_code = null;
  this.error_description = null;
  if (args) {
    if (args.error_code !== undefined) {
      this.error_code = args.error_code;
    }
    if (args.error_description !== undefined) {
      this.error_description = args.error_description;
    }
  }
};
Thrift.inherits(myfirst.MyError, Thrift.TException);
myfirst.MyError.prototype.name = 'MyError';
myfirst.MyError.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.error_code = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.error_description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

myfirst.MyError.prototype.write = function(output) {
  output.writeStructBegin('MyError');
  if (this.error_code !== null && this.error_code !== undefined) {
    output.writeFieldBegin('error_code', Thrift.Type.I32, 1);
    output.writeI32(this.error_code);
    output.writeFieldEnd();
  }
  if (this.error_description !== null && this.error_description !== undefined) {
    output.writeFieldBegin('error_description', Thrift.Type.STRING, 2);
    output.writeString(this.error_description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

myfirst.PI = 3.14159;
