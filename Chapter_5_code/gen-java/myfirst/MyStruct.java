/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package myfirst;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-4")
public class MyStruct implements org.apache.thrift.TBase<MyStruct, MyStruct._Fields>, java.io.Serializable, Cloneable, Comparable<MyStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MyStruct");

  private static final org.apache.thrift.protocol.TField MYBOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("mybool", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField MYBYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("mybyte", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField MYI16_FIELD_DESC = new org.apache.thrift.protocol.TField("myi16", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField MYI32_FIELD_DESC = new org.apache.thrift.protocol.TField("myi32", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MYI64_FIELD_DESC = new org.apache.thrift.protocol.TField("myi64", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField MYDOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("mydouble", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField MYSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("mystring", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MYLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("mylist", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField MYSET_FIELD_DESC = new org.apache.thrift.protocol.TField("myset", org.apache.thrift.protocol.TType.SET, (short)9);
  private static final org.apache.thrift.protocol.TField MYMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("mymap", org.apache.thrift.protocol.TType.MAP, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MyStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MyStructTupleSchemeFactory());
  }

  public boolean mybool; // required
  public byte mybyte; // required
  public short myi16; // required
  public int myi32; // required
  public long myi64; // required
  public double mydouble; // required
  public String mystring; // required
  public List<Integer> mylist; // required
  public Set<Integer> myset; // required
  public Map<Integer,Integer> mymap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MYBOOL((short)1, "mybool"),
    MYBYTE((short)2, "mybyte"),
    MYI16((short)3, "myi16"),
    MYI32((short)4, "myi32"),
    MYI64((short)5, "myi64"),
    MYDOUBLE((short)6, "mydouble"),
    MYSTRING((short)7, "mystring"),
    MYLIST((short)8, "mylist"),
    MYSET((short)9, "myset"),
    MYMAP((short)10, "mymap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MYBOOL
          return MYBOOL;
        case 2: // MYBYTE
          return MYBYTE;
        case 3: // MYI16
          return MYI16;
        case 4: // MYI32
          return MYI32;
        case 5: // MYI64
          return MYI64;
        case 6: // MYDOUBLE
          return MYDOUBLE;
        case 7: // MYSTRING
          return MYSTRING;
        case 8: // MYLIST
          return MYLIST;
        case 9: // MYSET
          return MYSET;
        case 10: // MYMAP
          return MYMAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MYBOOL_ISSET_ID = 0;
  private static final int __MYBYTE_ISSET_ID = 1;
  private static final int __MYI16_ISSET_ID = 2;
  private static final int __MYI32_ISSET_ID = 3;
  private static final int __MYI64_ISSET_ID = 4;
  private static final int __MYDOUBLE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MYBOOL, new org.apache.thrift.meta_data.FieldMetaData("mybool", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MYBYTE, new org.apache.thrift.meta_data.FieldMetaData("mybyte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.MYI16, new org.apache.thrift.meta_data.FieldMetaData("myi16", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MYI32, new org.apache.thrift.meta_data.FieldMetaData("myi32", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MYI64, new org.apache.thrift.meta_data.FieldMetaData("myi64", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MYDOUBLE, new org.apache.thrift.meta_data.FieldMetaData("mydouble", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MYSTRING, new org.apache.thrift.meta_data.FieldMetaData("mystring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MYLIST, new org.apache.thrift.meta_data.FieldMetaData("mylist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.MYSET, new org.apache.thrift.meta_data.FieldMetaData("myset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.MYMAP, new org.apache.thrift.meta_data.FieldMetaData("mymap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MyStruct.class, metaDataMap);
  }

  public MyStruct() {
  }

  public MyStruct(
    boolean mybool,
    byte mybyte,
    short myi16,
    int myi32,
    long myi64,
    double mydouble,
    String mystring,
    List<Integer> mylist,
    Set<Integer> myset,
    Map<Integer,Integer> mymap)
  {
    this();
    this.mybool = mybool;
    setMyboolIsSet(true);
    this.mybyte = mybyte;
    setMybyteIsSet(true);
    this.myi16 = myi16;
    setMyi16IsSet(true);
    this.myi32 = myi32;
    setMyi32IsSet(true);
    this.myi64 = myi64;
    setMyi64IsSet(true);
    this.mydouble = mydouble;
    setMydoubleIsSet(true);
    this.mystring = mystring;
    this.mylist = mylist;
    this.myset = myset;
    this.mymap = mymap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MyStruct(MyStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mybool = other.mybool;
    this.mybyte = other.mybyte;
    this.myi16 = other.myi16;
    this.myi32 = other.myi32;
    this.myi64 = other.myi64;
    this.mydouble = other.mydouble;
    if (other.isSetMystring()) {
      this.mystring = other.mystring;
    }
    if (other.isSetMylist()) {
      List<Integer> __this__mylist = new ArrayList<Integer>(other.mylist);
      this.mylist = __this__mylist;
    }
    if (other.isSetMyset()) {
      Set<Integer> __this__myset = new HashSet<Integer>(other.myset);
      this.myset = __this__myset;
    }
    if (other.isSetMymap()) {
      Map<Integer,Integer> __this__mymap = new HashMap<Integer,Integer>(other.mymap);
      this.mymap = __this__mymap;
    }
  }

  public MyStruct deepCopy() {
    return new MyStruct(this);
  }

  @Override
  public void clear() {
    setMyboolIsSet(false);
    this.mybool = false;
    setMybyteIsSet(false);
    this.mybyte = 0;
    setMyi16IsSet(false);
    this.myi16 = 0;
    setMyi32IsSet(false);
    this.myi32 = 0;
    setMyi64IsSet(false);
    this.myi64 = 0;
    setMydoubleIsSet(false);
    this.mydouble = 0.0;
    this.mystring = null;
    this.mylist = null;
    this.myset = null;
    this.mymap = null;
  }

  public boolean isMybool() {
    return this.mybool;
  }

  public MyStruct setMybool(boolean mybool) {
    this.mybool = mybool;
    setMyboolIsSet(true);
    return this;
  }

  public void unsetMybool() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MYBOOL_ISSET_ID);
  }

  /** Returns true if field mybool is set (has been assigned a value) and false otherwise */
  public boolean isSetMybool() {
    return EncodingUtils.testBit(__isset_bitfield, __MYBOOL_ISSET_ID);
  }

  public void setMyboolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MYBOOL_ISSET_ID, value);
  }

  public byte getMybyte() {
    return this.mybyte;
  }

  public MyStruct setMybyte(byte mybyte) {
    this.mybyte = mybyte;
    setMybyteIsSet(true);
    return this;
  }

  public void unsetMybyte() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MYBYTE_ISSET_ID);
  }

  /** Returns true if field mybyte is set (has been assigned a value) and false otherwise */
  public boolean isSetMybyte() {
    return EncodingUtils.testBit(__isset_bitfield, __MYBYTE_ISSET_ID);
  }

  public void setMybyteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MYBYTE_ISSET_ID, value);
  }

  public short getMyi16() {
    return this.myi16;
  }

  public MyStruct setMyi16(short myi16) {
    this.myi16 = myi16;
    setMyi16IsSet(true);
    return this;
  }

  public void unsetMyi16() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MYI16_ISSET_ID);
  }

  /** Returns true if field myi16 is set (has been assigned a value) and false otherwise */
  public boolean isSetMyi16() {
    return EncodingUtils.testBit(__isset_bitfield, __MYI16_ISSET_ID);
  }

  public void setMyi16IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MYI16_ISSET_ID, value);
  }

  public int getMyi32() {
    return this.myi32;
  }

  public MyStruct setMyi32(int myi32) {
    this.myi32 = myi32;
    setMyi32IsSet(true);
    return this;
  }

  public void unsetMyi32() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MYI32_ISSET_ID);
  }

  /** Returns true if field myi32 is set (has been assigned a value) and false otherwise */
  public boolean isSetMyi32() {
    return EncodingUtils.testBit(__isset_bitfield, __MYI32_ISSET_ID);
  }

  public void setMyi32IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MYI32_ISSET_ID, value);
  }

  public long getMyi64() {
    return this.myi64;
  }

  public MyStruct setMyi64(long myi64) {
    this.myi64 = myi64;
    setMyi64IsSet(true);
    return this;
  }

  public void unsetMyi64() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MYI64_ISSET_ID);
  }

  /** Returns true if field myi64 is set (has been assigned a value) and false otherwise */
  public boolean isSetMyi64() {
    return EncodingUtils.testBit(__isset_bitfield, __MYI64_ISSET_ID);
  }

  public void setMyi64IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MYI64_ISSET_ID, value);
  }

  public double getMydouble() {
    return this.mydouble;
  }

  public MyStruct setMydouble(double mydouble) {
    this.mydouble = mydouble;
    setMydoubleIsSet(true);
    return this;
  }

  public void unsetMydouble() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MYDOUBLE_ISSET_ID);
  }

  /** Returns true if field mydouble is set (has been assigned a value) and false otherwise */
  public boolean isSetMydouble() {
    return EncodingUtils.testBit(__isset_bitfield, __MYDOUBLE_ISSET_ID);
  }

  public void setMydoubleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MYDOUBLE_ISSET_ID, value);
  }

  public String getMystring() {
    return this.mystring;
  }

  public MyStruct setMystring(String mystring) {
    this.mystring = mystring;
    return this;
  }

  public void unsetMystring() {
    this.mystring = null;
  }

  /** Returns true if field mystring is set (has been assigned a value) and false otherwise */
  public boolean isSetMystring() {
    return this.mystring != null;
  }

  public void setMystringIsSet(boolean value) {
    if (!value) {
      this.mystring = null;
    }
  }

  public int getMylistSize() {
    return (this.mylist == null) ? 0 : this.mylist.size();
  }

  public java.util.Iterator<Integer> getMylistIterator() {
    return (this.mylist == null) ? null : this.mylist.iterator();
  }

  public void addToMylist(int elem) {
    if (this.mylist == null) {
      this.mylist = new ArrayList<Integer>();
    }
    this.mylist.add(elem);
  }

  public List<Integer> getMylist() {
    return this.mylist;
  }

  public MyStruct setMylist(List<Integer> mylist) {
    this.mylist = mylist;
    return this;
  }

  public void unsetMylist() {
    this.mylist = null;
  }

  /** Returns true if field mylist is set (has been assigned a value) and false otherwise */
  public boolean isSetMylist() {
    return this.mylist != null;
  }

  public void setMylistIsSet(boolean value) {
    if (!value) {
      this.mylist = null;
    }
  }

  public int getMysetSize() {
    return (this.myset == null) ? 0 : this.myset.size();
  }

  public java.util.Iterator<Integer> getMysetIterator() {
    return (this.myset == null) ? null : this.myset.iterator();
  }

  public void addToMyset(int elem) {
    if (this.myset == null) {
      this.myset = new HashSet<Integer>();
    }
    this.myset.add(elem);
  }

  public Set<Integer> getMyset() {
    return this.myset;
  }

  public MyStruct setMyset(Set<Integer> myset) {
    this.myset = myset;
    return this;
  }

  public void unsetMyset() {
    this.myset = null;
  }

  /** Returns true if field myset is set (has been assigned a value) and false otherwise */
  public boolean isSetMyset() {
    return this.myset != null;
  }

  public void setMysetIsSet(boolean value) {
    if (!value) {
      this.myset = null;
    }
  }

  public int getMymapSize() {
    return (this.mymap == null) ? 0 : this.mymap.size();
  }

  public void putToMymap(int key, int val) {
    if (this.mymap == null) {
      this.mymap = new HashMap<Integer,Integer>();
    }
    this.mymap.put(key, val);
  }

  public Map<Integer,Integer> getMymap() {
    return this.mymap;
  }

  public MyStruct setMymap(Map<Integer,Integer> mymap) {
    this.mymap = mymap;
    return this;
  }

  public void unsetMymap() {
    this.mymap = null;
  }

  /** Returns true if field mymap is set (has been assigned a value) and false otherwise */
  public boolean isSetMymap() {
    return this.mymap != null;
  }

  public void setMymapIsSet(boolean value) {
    if (!value) {
      this.mymap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MYBOOL:
      if (value == null) {
        unsetMybool();
      } else {
        setMybool((Boolean)value);
      }
      break;

    case MYBYTE:
      if (value == null) {
        unsetMybyte();
      } else {
        setMybyte((Byte)value);
      }
      break;

    case MYI16:
      if (value == null) {
        unsetMyi16();
      } else {
        setMyi16((Short)value);
      }
      break;

    case MYI32:
      if (value == null) {
        unsetMyi32();
      } else {
        setMyi32((Integer)value);
      }
      break;

    case MYI64:
      if (value == null) {
        unsetMyi64();
      } else {
        setMyi64((Long)value);
      }
      break;

    case MYDOUBLE:
      if (value == null) {
        unsetMydouble();
      } else {
        setMydouble((Double)value);
      }
      break;

    case MYSTRING:
      if (value == null) {
        unsetMystring();
      } else {
        setMystring((String)value);
      }
      break;

    case MYLIST:
      if (value == null) {
        unsetMylist();
      } else {
        setMylist((List<Integer>)value);
      }
      break;

    case MYSET:
      if (value == null) {
        unsetMyset();
      } else {
        setMyset((Set<Integer>)value);
      }
      break;

    case MYMAP:
      if (value == null) {
        unsetMymap();
      } else {
        setMymap((Map<Integer,Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MYBOOL:
      return Boolean.valueOf(isMybool());

    case MYBYTE:
      return Byte.valueOf(getMybyte());

    case MYI16:
      return Short.valueOf(getMyi16());

    case MYI32:
      return Integer.valueOf(getMyi32());

    case MYI64:
      return Long.valueOf(getMyi64());

    case MYDOUBLE:
      return Double.valueOf(getMydouble());

    case MYSTRING:
      return getMystring();

    case MYLIST:
      return getMylist();

    case MYSET:
      return getMyset();

    case MYMAP:
      return getMymap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MYBOOL:
      return isSetMybool();
    case MYBYTE:
      return isSetMybyte();
    case MYI16:
      return isSetMyi16();
    case MYI32:
      return isSetMyi32();
    case MYI64:
      return isSetMyi64();
    case MYDOUBLE:
      return isSetMydouble();
    case MYSTRING:
      return isSetMystring();
    case MYLIST:
      return isSetMylist();
    case MYSET:
      return isSetMyset();
    case MYMAP:
      return isSetMymap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MyStruct)
      return this.equals((MyStruct)that);
    return false;
  }

  public boolean equals(MyStruct that) {
    if (that == null)
      return false;

    boolean this_present_mybool = true;
    boolean that_present_mybool = true;
    if (this_present_mybool || that_present_mybool) {
      if (!(this_present_mybool && that_present_mybool))
        return false;
      if (this.mybool != that.mybool)
        return false;
    }

    boolean this_present_mybyte = true;
    boolean that_present_mybyte = true;
    if (this_present_mybyte || that_present_mybyte) {
      if (!(this_present_mybyte && that_present_mybyte))
        return false;
      if (this.mybyte != that.mybyte)
        return false;
    }

    boolean this_present_myi16 = true;
    boolean that_present_myi16 = true;
    if (this_present_myi16 || that_present_myi16) {
      if (!(this_present_myi16 && that_present_myi16))
        return false;
      if (this.myi16 != that.myi16)
        return false;
    }

    boolean this_present_myi32 = true;
    boolean that_present_myi32 = true;
    if (this_present_myi32 || that_present_myi32) {
      if (!(this_present_myi32 && that_present_myi32))
        return false;
      if (this.myi32 != that.myi32)
        return false;
    }

    boolean this_present_myi64 = true;
    boolean that_present_myi64 = true;
    if (this_present_myi64 || that_present_myi64) {
      if (!(this_present_myi64 && that_present_myi64))
        return false;
      if (this.myi64 != that.myi64)
        return false;
    }

    boolean this_present_mydouble = true;
    boolean that_present_mydouble = true;
    if (this_present_mydouble || that_present_mydouble) {
      if (!(this_present_mydouble && that_present_mydouble))
        return false;
      if (this.mydouble != that.mydouble)
        return false;
    }

    boolean this_present_mystring = true && this.isSetMystring();
    boolean that_present_mystring = true && that.isSetMystring();
    if (this_present_mystring || that_present_mystring) {
      if (!(this_present_mystring && that_present_mystring))
        return false;
      if (!this.mystring.equals(that.mystring))
        return false;
    }

    boolean this_present_mylist = true && this.isSetMylist();
    boolean that_present_mylist = true && that.isSetMylist();
    if (this_present_mylist || that_present_mylist) {
      if (!(this_present_mylist && that_present_mylist))
        return false;
      if (!this.mylist.equals(that.mylist))
        return false;
    }

    boolean this_present_myset = true && this.isSetMyset();
    boolean that_present_myset = true && that.isSetMyset();
    if (this_present_myset || that_present_myset) {
      if (!(this_present_myset && that_present_myset))
        return false;
      if (!this.myset.equals(that.myset))
        return false;
    }

    boolean this_present_mymap = true && this.isSetMymap();
    boolean that_present_mymap = true && that.isSetMymap();
    if (this_present_mymap || that_present_mymap) {
      if (!(this_present_mymap && that_present_mymap))
        return false;
      if (!this.mymap.equals(that.mymap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_mybool = true;
    list.add(present_mybool);
    if (present_mybool)
      list.add(mybool);

    boolean present_mybyte = true;
    list.add(present_mybyte);
    if (present_mybyte)
      list.add(mybyte);

    boolean present_myi16 = true;
    list.add(present_myi16);
    if (present_myi16)
      list.add(myi16);

    boolean present_myi32 = true;
    list.add(present_myi32);
    if (present_myi32)
      list.add(myi32);

    boolean present_myi64 = true;
    list.add(present_myi64);
    if (present_myi64)
      list.add(myi64);

    boolean present_mydouble = true;
    list.add(present_mydouble);
    if (present_mydouble)
      list.add(mydouble);

    boolean present_mystring = true && (isSetMystring());
    list.add(present_mystring);
    if (present_mystring)
      list.add(mystring);

    boolean present_mylist = true && (isSetMylist());
    list.add(present_mylist);
    if (present_mylist)
      list.add(mylist);

    boolean present_myset = true && (isSetMyset());
    list.add(present_myset);
    if (present_myset)
      list.add(myset);

    boolean present_mymap = true && (isSetMymap());
    list.add(present_mymap);
    if (present_mymap)
      list.add(mymap);

    return list.hashCode();
  }

  @Override
  public int compareTo(MyStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMybool()).compareTo(other.isSetMybool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMybool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mybool, other.mybool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMybyte()).compareTo(other.isSetMybyte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMybyte()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mybyte, other.mybyte);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyi16()).compareTo(other.isSetMyi16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyi16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myi16, other.myi16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyi32()).compareTo(other.isSetMyi32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyi32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myi32, other.myi32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyi64()).compareTo(other.isSetMyi64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyi64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myi64, other.myi64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMydouble()).compareTo(other.isSetMydouble());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMydouble()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mydouble, other.mydouble);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMystring()).compareTo(other.isSetMystring());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMystring()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mystring, other.mystring);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMylist()).compareTo(other.isSetMylist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMylist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mylist, other.mylist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyset()).compareTo(other.isSetMyset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myset, other.myset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMymap()).compareTo(other.isSetMymap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMymap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mymap, other.mymap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MyStruct(");
    boolean first = true;

    sb.append("mybool:");
    sb.append(this.mybool);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mybyte:");
    sb.append(this.mybyte);
    first = false;
    if (!first) sb.append(", ");
    sb.append("myi16:");
    sb.append(this.myi16);
    first = false;
    if (!first) sb.append(", ");
    sb.append("myi32:");
    sb.append(this.myi32);
    first = false;
    if (!first) sb.append(", ");
    sb.append("myi64:");
    sb.append(this.myi64);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mydouble:");
    sb.append(this.mydouble);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mystring:");
    if (this.mystring == null) {
      sb.append("null");
    } else {
      sb.append(this.mystring);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mylist:");
    if (this.mylist == null) {
      sb.append("null");
    } else {
      sb.append(this.mylist);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myset:");
    if (this.myset == null) {
      sb.append("null");
    } else {
      sb.append(this.myset);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mymap:");
    if (this.mymap == null) {
      sb.append("null");
    } else {
      sb.append(this.mymap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MyStructStandardSchemeFactory implements SchemeFactory {
    public MyStructStandardScheme getScheme() {
      return new MyStructStandardScheme();
    }
  }

  private static class MyStructStandardScheme extends StandardScheme<MyStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MyStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MYBOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.mybool = iprot.readBool();
              struct.setMyboolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MYBYTE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.mybyte = iprot.readByte();
              struct.setMybyteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MYI16
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.myi16 = iprot.readI16();
              struct.setMyi16IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MYI32
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.myi32 = iprot.readI32();
              struct.setMyi32IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MYI64
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.myi64 = iprot.readI64();
              struct.setMyi64IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MYDOUBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mydouble = iprot.readDouble();
              struct.setMydoubleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MYSTRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mystring = iprot.readString();
              struct.setMystringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MYLIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.mylist = new ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.mylist.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setMylistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MYSET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.myset = new HashSet<Integer>(2*_set3.size);
                int _elem4;
                for (int _i5 = 0; _i5 < _set3.size; ++_i5)
                {
                  _elem4 = iprot.readI32();
                  struct.myset.add(_elem4);
                }
                iprot.readSetEnd();
              }
              struct.setMysetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MYMAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct.mymap = new HashMap<Integer,Integer>(2*_map6.size);
                int _key7;
                int _val8;
                for (int _i9 = 0; _i9 < _map6.size; ++_i9)
                {
                  _key7 = iprot.readI32();
                  _val8 = iprot.readI32();
                  struct.mymap.put(_key7, _val8);
                }
                iprot.readMapEnd();
              }
              struct.setMymapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MyStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MYBOOL_FIELD_DESC);
      oprot.writeBool(struct.mybool);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MYBYTE_FIELD_DESC);
      oprot.writeByte(struct.mybyte);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MYI16_FIELD_DESC);
      oprot.writeI16(struct.myi16);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MYI32_FIELD_DESC);
      oprot.writeI32(struct.myi32);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MYI64_FIELD_DESC);
      oprot.writeI64(struct.myi64);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MYDOUBLE_FIELD_DESC);
      oprot.writeDouble(struct.mydouble);
      oprot.writeFieldEnd();
      if (struct.mystring != null) {
        oprot.writeFieldBegin(MYSTRING_FIELD_DESC);
        oprot.writeString(struct.mystring);
        oprot.writeFieldEnd();
      }
      if (struct.mylist != null) {
        oprot.writeFieldBegin(MYLIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.mylist.size()));
          for (int _iter10 : struct.mylist)
          {
            oprot.writeI32(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.myset != null) {
        oprot.writeFieldBegin(MYSET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.myset.size()));
          for (int _iter11 : struct.myset)
          {
            oprot.writeI32(_iter11);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mymap != null) {
        oprot.writeFieldBegin(MYMAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.mymap.size()));
          for (Map.Entry<Integer, Integer> _iter12 : struct.mymap.entrySet())
          {
            oprot.writeI32(_iter12.getKey());
            oprot.writeI32(_iter12.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MyStructTupleSchemeFactory implements SchemeFactory {
    public MyStructTupleScheme getScheme() {
      return new MyStructTupleScheme();
    }
  }

  private static class MyStructTupleScheme extends TupleScheme<MyStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MyStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMybool()) {
        optionals.set(0);
      }
      if (struct.isSetMybyte()) {
        optionals.set(1);
      }
      if (struct.isSetMyi16()) {
        optionals.set(2);
      }
      if (struct.isSetMyi32()) {
        optionals.set(3);
      }
      if (struct.isSetMyi64()) {
        optionals.set(4);
      }
      if (struct.isSetMydouble()) {
        optionals.set(5);
      }
      if (struct.isSetMystring()) {
        optionals.set(6);
      }
      if (struct.isSetMylist()) {
        optionals.set(7);
      }
      if (struct.isSetMyset()) {
        optionals.set(8);
      }
      if (struct.isSetMymap()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetMybool()) {
        oprot.writeBool(struct.mybool);
      }
      if (struct.isSetMybyte()) {
        oprot.writeByte(struct.mybyte);
      }
      if (struct.isSetMyi16()) {
        oprot.writeI16(struct.myi16);
      }
      if (struct.isSetMyi32()) {
        oprot.writeI32(struct.myi32);
      }
      if (struct.isSetMyi64()) {
        oprot.writeI64(struct.myi64);
      }
      if (struct.isSetMydouble()) {
        oprot.writeDouble(struct.mydouble);
      }
      if (struct.isSetMystring()) {
        oprot.writeString(struct.mystring);
      }
      if (struct.isSetMylist()) {
        {
          oprot.writeI32(struct.mylist.size());
          for (int _iter13 : struct.mylist)
          {
            oprot.writeI32(_iter13);
          }
        }
      }
      if (struct.isSetMyset()) {
        {
          oprot.writeI32(struct.myset.size());
          for (int _iter14 : struct.myset)
          {
            oprot.writeI32(_iter14);
          }
        }
      }
      if (struct.isSetMymap()) {
        {
          oprot.writeI32(struct.mymap.size());
          for (Map.Entry<Integer, Integer> _iter15 : struct.mymap.entrySet())
          {
            oprot.writeI32(_iter15.getKey());
            oprot.writeI32(_iter15.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MyStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.mybool = iprot.readBool();
        struct.setMyboolIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mybyte = iprot.readByte();
        struct.setMybyteIsSet(true);
      }
      if (incoming.get(2)) {
        struct.myi16 = iprot.readI16();
        struct.setMyi16IsSet(true);
      }
      if (incoming.get(3)) {
        struct.myi32 = iprot.readI32();
        struct.setMyi32IsSet(true);
      }
      if (incoming.get(4)) {
        struct.myi64 = iprot.readI64();
        struct.setMyi64IsSet(true);
      }
      if (incoming.get(5)) {
        struct.mydouble = iprot.readDouble();
        struct.setMydoubleIsSet(true);
      }
      if (incoming.get(6)) {
        struct.mystring = iprot.readString();
        struct.setMystringIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list16 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.mylist = new ArrayList<Integer>(_list16.size);
          int _elem17;
          for (int _i18 = 0; _i18 < _list16.size; ++_i18)
          {
            _elem17 = iprot.readI32();
            struct.mylist.add(_elem17);
          }
        }
        struct.setMylistIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TSet _set19 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.myset = new HashSet<Integer>(2*_set19.size);
          int _elem20;
          for (int _i21 = 0; _i21 < _set19.size; ++_i21)
          {
            _elem20 = iprot.readI32();
            struct.myset.add(_elem20);
          }
        }
        struct.setMysetIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.mymap = new HashMap<Integer,Integer>(2*_map22.size);
          int _key23;
          int _val24;
          for (int _i25 = 0; _i25 < _map22.size; ++_i25)
          {
            _key23 = iprot.readI32();
            _val24 = iprot.readI32();
            struct.mymap.put(_key23, _val24);
          }
        }
        struct.setMymapIsSet(true);
      }
    }
  }

}

