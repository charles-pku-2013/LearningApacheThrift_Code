/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MyFirstService_H
#define MyFirstService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "myfirst_types.h"

namespace myfirst {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MyFirstServiceIf {
 public:
  virtual ~MyFirstServiceIf() {}
  virtual void log(const std::string& filename) = 0;
  virtual int multiply(const int number1, const int number2) = 0;
  virtual int get_log_size(const std::string& filename) = 0;
};

class MyFirstServiceIfFactory {
 public:
  typedef MyFirstServiceIf Handler;

  virtual ~MyFirstServiceIfFactory() {}

  virtual MyFirstServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MyFirstServiceIf* /* handler */) = 0;
};

class MyFirstServiceIfSingletonFactory : virtual public MyFirstServiceIfFactory {
 public:
  MyFirstServiceIfSingletonFactory(const boost::shared_ptr<MyFirstServiceIf>& iface) : iface_(iface) {}
  virtual ~MyFirstServiceIfSingletonFactory() {}

  virtual MyFirstServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MyFirstServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<MyFirstServiceIf> iface_;
};

class MyFirstServiceNull : virtual public MyFirstServiceIf {
 public:
  virtual ~MyFirstServiceNull() {}
  void log(const std::string& /* filename */) {
    return;
  }
  int multiply(const int /* number1 */, const int /* number2 */) {
    int _return = 0;
    return _return;
  }
  int get_log_size(const std::string& /* filename */) {
    int _return = 0;
    return _return;
  }
};

typedef struct _MyFirstService_log_args__isset {
  _MyFirstService_log_args__isset() : filename(false) {}
  bool filename :1;
} _MyFirstService_log_args__isset;

class MyFirstService_log_args {
 public:

  MyFirstService_log_args(const MyFirstService_log_args&);
  MyFirstService_log_args(MyFirstService_log_args&&);
  MyFirstService_log_args& operator=(const MyFirstService_log_args&);
  MyFirstService_log_args& operator=(MyFirstService_log_args&&);
  MyFirstService_log_args() : filename() {
  }

  virtual ~MyFirstService_log_args() throw();
  std::string filename;

  _MyFirstService_log_args__isset __isset;

  void __set_filename(const std::string& val);

  bool operator == (const MyFirstService_log_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const MyFirstService_log_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyFirstService_log_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class MyFirstService_log_pargs {
 public:


  virtual ~MyFirstService_log_pargs() throw();
  const std::string* filename;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _MyFirstService_multiply_args__isset {
  _MyFirstService_multiply_args__isset() : number1(false), number2(false) {}
  bool number1 :1;
  bool number2 :1;
} _MyFirstService_multiply_args__isset;

class MyFirstService_multiply_args {
 public:

  MyFirstService_multiply_args(const MyFirstService_multiply_args&);
  MyFirstService_multiply_args(MyFirstService_multiply_args&&);
  MyFirstService_multiply_args& operator=(const MyFirstService_multiply_args&);
  MyFirstService_multiply_args& operator=(MyFirstService_multiply_args&&);
  MyFirstService_multiply_args() : number1(0), number2(0) {
  }

  virtual ~MyFirstService_multiply_args() throw();
  int number1;
  int number2;

  _MyFirstService_multiply_args__isset __isset;

  void __set_number1(const int val);

  void __set_number2(const int val);

  bool operator == (const MyFirstService_multiply_args & rhs) const
  {
    if (!(number1 == rhs.number1))
      return false;
    if (!(number2 == rhs.number2))
      return false;
    return true;
  }
  bool operator != (const MyFirstService_multiply_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyFirstService_multiply_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class MyFirstService_multiply_pargs {
 public:


  virtual ~MyFirstService_multiply_pargs() throw();
  const int* number1;
  const int* number2;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _MyFirstService_multiply_result__isset {
  _MyFirstService_multiply_result__isset() : success(false) {}
  bool success :1;
} _MyFirstService_multiply_result__isset;

class MyFirstService_multiply_result {
 public:

  MyFirstService_multiply_result(const MyFirstService_multiply_result&);
  MyFirstService_multiply_result(MyFirstService_multiply_result&&);
  MyFirstService_multiply_result& operator=(const MyFirstService_multiply_result&);
  MyFirstService_multiply_result& operator=(MyFirstService_multiply_result&&);
  MyFirstService_multiply_result() : success(0) {
  }

  virtual ~MyFirstService_multiply_result() throw();
  int success;

  _MyFirstService_multiply_result__isset __isset;

  void __set_success(const int val);

  bool operator == (const MyFirstService_multiply_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MyFirstService_multiply_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyFirstService_multiply_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _MyFirstService_multiply_presult__isset {
  _MyFirstService_multiply_presult__isset() : success(false) {}
  bool success :1;
} _MyFirstService_multiply_presult__isset;

class MyFirstService_multiply_presult {
 public:


  virtual ~MyFirstService_multiply_presult() throw();
  int* success;

  _MyFirstService_multiply_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _MyFirstService_get_log_size_args__isset {
  _MyFirstService_get_log_size_args__isset() : filename(false) {}
  bool filename :1;
} _MyFirstService_get_log_size_args__isset;

class MyFirstService_get_log_size_args {
 public:

  MyFirstService_get_log_size_args(const MyFirstService_get_log_size_args&);
  MyFirstService_get_log_size_args(MyFirstService_get_log_size_args&&);
  MyFirstService_get_log_size_args& operator=(const MyFirstService_get_log_size_args&);
  MyFirstService_get_log_size_args& operator=(MyFirstService_get_log_size_args&&);
  MyFirstService_get_log_size_args() : filename() {
  }

  virtual ~MyFirstService_get_log_size_args() throw();
  std::string filename;

  _MyFirstService_get_log_size_args__isset __isset;

  void __set_filename(const std::string& val);

  bool operator == (const MyFirstService_get_log_size_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const MyFirstService_get_log_size_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyFirstService_get_log_size_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class MyFirstService_get_log_size_pargs {
 public:


  virtual ~MyFirstService_get_log_size_pargs() throw();
  const std::string* filename;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _MyFirstService_get_log_size_result__isset {
  _MyFirstService_get_log_size_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _MyFirstService_get_log_size_result__isset;

class MyFirstService_get_log_size_result {
 public:

  MyFirstService_get_log_size_result(const MyFirstService_get_log_size_result&);
  MyFirstService_get_log_size_result(MyFirstService_get_log_size_result&&);
  MyFirstService_get_log_size_result& operator=(const MyFirstService_get_log_size_result&);
  MyFirstService_get_log_size_result& operator=(MyFirstService_get_log_size_result&&);
  MyFirstService_get_log_size_result() : success(0) {
  }

  virtual ~MyFirstService_get_log_size_result() throw();
  int success;
  MyError error;

  _MyFirstService_get_log_size_result__isset __isset;

  void __set_success(const int val);

  void __set_error(const MyError& val);

  bool operator == (const MyFirstService_get_log_size_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const MyFirstService_get_log_size_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MyFirstService_get_log_size_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _MyFirstService_get_log_size_presult__isset {
  _MyFirstService_get_log_size_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _MyFirstService_get_log_size_presult__isset;

class MyFirstService_get_log_size_presult {
 public:


  virtual ~MyFirstService_get_log_size_presult() throw();
  int* success;
  MyError error;

  _MyFirstService_get_log_size_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class MyFirstServiceClientT : virtual public MyFirstServiceIf {
 public:
  MyFirstServiceClientT(boost::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  MyFirstServiceClientT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(boost::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void log(const std::string& filename);
  void send_log(const std::string& filename);
  int multiply(const int number1, const int number2);
  void send_multiply(const int number1, const int number2);
  int recv_multiply();
  int get_log_size(const std::string& filename);
  void send_get_log_size(const std::string& filename);
  int recv_get_log_size();
 protected:
  boost::shared_ptr< Protocol_> piprot_;
  boost::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef MyFirstServiceClientT< ::apache::thrift::protocol::TProtocol> MyFirstServiceClient;

template <class Protocol_>
class MyFirstServiceProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  boost::shared_ptr<MyFirstServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MyFirstServiceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (MyFirstServiceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(NULL), specialized(NULL) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_log(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_log(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_multiply(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_multiply(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_get_log_size(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_log_size(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  MyFirstServiceProcessorT(boost::shared_ptr<MyFirstServiceIf> iface) :
    iface_(iface) {
    processMap_["log"] = ProcessFunctions(
      &MyFirstServiceProcessorT::process_log,
      &MyFirstServiceProcessorT::process_log);
    processMap_["multiply"] = ProcessFunctions(
      &MyFirstServiceProcessorT::process_multiply,
      &MyFirstServiceProcessorT::process_multiply);
    processMap_["get_log_size"] = ProcessFunctions(
      &MyFirstServiceProcessorT::process_get_log_size,
      &MyFirstServiceProcessorT::process_get_log_size);
  }

  virtual ~MyFirstServiceProcessorT() {}
};

typedef MyFirstServiceProcessorT< ::apache::thrift::protocol::TDummyProtocol > MyFirstServiceProcessor;

template <class Protocol_>
class MyFirstServiceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  MyFirstServiceProcessorFactoryT(const ::boost::shared_ptr< MyFirstServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MyFirstServiceIfFactory > handlerFactory_;
};

typedef MyFirstServiceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > MyFirstServiceProcessorFactory;

class MyFirstServiceMultiface : virtual public MyFirstServiceIf {
 public:
  MyFirstServiceMultiface(std::vector<boost::shared_ptr<MyFirstServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MyFirstServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MyFirstServiceIf> > ifaces_;
  MyFirstServiceMultiface() {}
  void add(boost::shared_ptr<MyFirstServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void log(const std::string& filename) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->log(filename);
    }
    ifaces_[i]->log(filename);
  }

  int multiply(const int number1, const int number2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->multiply(number1, number2);
    }
    return ifaces_[i]->multiply(number1, number2);
  }

  int get_log_size(const std::string& filename) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_log_size(filename);
    }
    return ifaces_[i]->get_log_size(filename);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class MyFirstServiceConcurrentClientT : virtual public MyFirstServiceIf {
 public:
  MyFirstServiceConcurrentClientT(boost::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  MyFirstServiceConcurrentClientT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(boost::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(boost::shared_ptr< Protocol_> iprot, boost::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void log(const std::string& filename);
  void send_log(const std::string& filename);
  int multiply(const int number1, const int number2);
  int32_t send_multiply(const int number1, const int number2);
  int recv_multiply(const int32_t seqid);
  int get_log_size(const std::string& filename);
  int32_t send_get_log_size(const std::string& filename);
  int recv_get_log_size(const int32_t seqid);
 protected:
  boost::shared_ptr< Protocol_> piprot_;
  boost::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

typedef MyFirstServiceConcurrentClientT< ::apache::thrift::protocol::TProtocol> MyFirstServiceConcurrentClient;

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#include "MyFirstService.tcc"
#include "myfirst_types.tcc"

#endif
