#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'myfirst_types'

module Myfirst
  module MyFirstService
    class Client
      include ::Thrift::Client

      def log(filename)
        send_log(filename)
      end

      def send_log(filename)
        send_oneway_message('log', Log_args, :filename => filename)
      end
      def multiply(number1, number2)
        send_multiply(number1, number2)
        return recv_multiply()
      end

      def send_multiply(number1, number2)
        send_message('multiply', Multiply_args, :number1 => number1, :number2 => number2)
      end

      def recv_multiply()
        result = receive_message(Multiply_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'multiply failed: unknown result')
      end

      def get_log_size(filename)
        send_get_log_size(filename)
        return recv_get_log_size()
      end

      def send_get_log_size(filename)
        send_message('get_log_size', Get_log_size_args, :filename => filename)
      end

      def recv_get_log_size()
        result = receive_message(Get_log_size_result)
        return result.success unless result.success.nil?
        raise result.error unless result.error.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_log_size failed: unknown result')
      end

    end

    class Processor
      include ::Thrift::Processor

      def process_log(seqid, iprot, oprot)
        args = read_args(iprot, Log_args)
        @handler.log(args.filename)
        return
      end

      def process_multiply(seqid, iprot, oprot)
        args = read_args(iprot, Multiply_args)
        result = Multiply_result.new()
        result.success = @handler.multiply(args.number1, args.number2)
        write_result(result, oprot, 'multiply', seqid)
      end

      def process_get_log_size(seqid, iprot, oprot)
        args = read_args(iprot, Get_log_size_args)
        result = Get_log_size_result.new()
        begin
          result.success = @handler.get_log_size(args.filename)
        rescue ::Myfirst::MyError => error
          result.error = error
        end
        write_result(result, oprot, 'get_log_size', seqid)
      end

    end

    # HELPER FUNCTIONS AND STRUCTURES

    class Log_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FILENAME = 1

      FIELDS = {
        FILENAME => {:type => ::Thrift::Types::STRING, :name => 'filename'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Log_result
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Multiply_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      NUMBER1 = 1
      NUMBER2 = 2

      FIELDS = {
        NUMBER1 => {:type => ::Thrift::Types::I32, :name => 'number1'},
        NUMBER2 => {:type => ::Thrift::Types::I32, :name => 'number2'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Multiply_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Get_log_size_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FILENAME = 1

      FIELDS = {
        FILENAME => {:type => ::Thrift::Types::STRING, :name => 'filename'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Get_log_size_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      ERROR = 1

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
        ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'error', :class => ::Myfirst::MyError}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end

end
